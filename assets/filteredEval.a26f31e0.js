var Y=Object.defineProperty,Z=Object.defineProperties;var $=Object.getOwnPropertyDescriptors;var R=Object.getOwnPropertySymbols;var tt=Object.prototype.hasOwnProperty,et=Object.prototype.propertyIsEnumerable;var D=(d,u,c)=>u in d?Y(d,u,{enumerable:!0,configurable:!0,writable:!0,value:c}):d[u]=c,g=(d,u)=>{for(var c in u||(u={}))tt.call(u,c)&&D(d,c,u[c]);if(R)for(var c of R(u))et.call(u,c)&&D(d,c,u[c]);return d},p=(d,u)=>Z(d,$(u));(function(){"use strict";function d(n,t){return t.reduce((e,s)=>{const a=typeof n=="string"?s[n]:n(s);return e[a]=(e[a]||[]).concat(s),e},{})}function u(n){return String(Math.floor(n/60)).padStart(2,"0")+":"+String(Math.floor(n%60)).padStart(2,"0")}const c={leaderboards:{minRounds:50,maxDaysSinceLastSeen:90}};function S(n,t){return n.filter(({players:e,date:s})=>(typeof t.players.min!="number"||e.length>=t.players.min)&&(typeof t.players.max!="number"||e.length<=t.players.max)&&(t.date.min===null||isNaN(t.date.min)||s>=t.date.min)&&(t.date.max===null||isNaN(t.date.max)||s<=t.date.max))}function K(n,t){const e=_(n,t);return{rounds:n,totals:k(n),items:O(n),players:e,leaderboards:x(e.filter(s=>{var o,f;const a=(o=n[n.length-1])==null?void 0:o.date,i=(f=s.rounds.any[s.rounds.any.length-1])==null?void 0:f.date,r=(a-(i||0))/(1e3*60*60*24),{leaderboards:{minRounds:l,maxDaysSinceLastSeen:m}}=c;return s.rounds.any.length>=l||r<=m}))}}function _(n,t){return t.map(e=>{const s=(f,v)=>{const z=Object.keys(v[0]);return Object.fromEntries(z.map(M=>[M,f(...v.map(Q=>Q[M]))]))},a=E(n,e.guid),i=(()=>{const f=g({any:a,innocent:[],traitor:[],detective:[]},d(({player:v})=>v.role,a));return f.innocentTeam=[...f.innocent,...f.detective],f})(),r=s(y,[i]),l=s(N,[r]),m=s(F,[i]),o=s(I,[i]);return p(g({},e),{rounds:i,inRounds:w(a,e.guid),stats:{playtime:s(A,[i]),roundsWon:o,roundsSurvived:s(L,[i]),roundsDiedFirst:s(T,[i]),roundsFirstBlood:s(b,[i]),kills:r,hitscanKills:l,teamKills:s(P,[r]),explosiveKills:s(j,[r]),environmentalKills:s(G,[r]),multiKills:s(J,[i]),aces:s(U,[o]),deaths:m,suicides:s(W,[m]),kdr:s(H,[r,m]),kdrAdjusted:s(C,[r,m]),headshotPct:s(B,[l]),chatMessages:s(q,[i]),items:g({traitor:[],detective:[]},d("role",X(a,e.guid))),weapons:V(r.any)}})})}function x(n){return{kills:[...n].map(t=>({player:t,value:t.stats.kills.any.length})).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value),deaths:[...n].map(t=>({player:t,value:t.stats.deaths.any.length})).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value),kdrAdjusted:[...n].filter(t=>t.stats.kills.any.length>0).sort((t,e)=>e.stats.kdrAdjusted.any-t.stats.kdrAdjusted.any).map(t=>({player:t,value:t.stats.kdrAdjusted.any.toFixed(2)})),headshotPct:[...n].filter(t=>t.stats.kills.any.length>0).sort((t,e)=>e.stats.headshotPct.any-t.stats.headshotPct.any).map(t=>({player:t,value:(t.stats.headshotPct.any*100).toFixed()+"%"})),neckKillsPct:[...n].map(t=>({player:t,value:t.stats.hitscanKills.any.filter(({hitLoc:e})=>e==="neck").length/(t.stats.hitscanKills.any.length||1)})).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value).map(({player:t,value:e})=>({player:t,value:(e*100).toFixed(1)+"%"})),multiKills:[...n].map(t=>({player:t,value:t.stats.multiKills.any.length})).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value),bombMultiKills:[...n].map(t=>({player:t,value:t.stats.multiKills.any.filter(([e])=>e.weapon==="briefcase_bomb_mp").length})).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value),explosiveKills:[...n].map(t=>({player:t,value:t.stats.explosiveKills.any.length})).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value),environmentalKills:[...n].map(t=>({player:t,value:t.stats.environmentalKills.any.length})).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value),revolverKills:[...n].map(t=>({player:t,value:t.stats.kills.any.filter(({weapon:e})=>e==="coltanaconda_mp").length})).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value),rpgDirectHitKills:[...n].map(t=>({player:t,value:t.stats.kills.any.filter(({weapon:e,means:s})=>e==="rpg_mp"&&s==="MOD_PROJECTILE").length})).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value),suicides:[...n].map(t=>({player:t,value:t.stats.suicides.any.length})).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value),fallingSuicides:[...n].map(t=>({player:t,value:t.stats.suicides.any.filter(({means:e})=>["MOD_FALLING","MOD_TRIGGER_HURT"].includes(e)).length})).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value),attackHeliSuicides:[...n].map(t=>({player:t,value:t.stats.suicides.any.filter(({weapon:e})=>e==="cobra_20mm_mp").length})).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value),traitorRoundWinTime:[...n].map(t=>({player:t,value:t.stats.roundsWon.traitor.reduce((e,{outcome:{roundLength:s}})=>s<e?s:e,1/0)})).filter(({value:t})=>t<1/0).sort((t,e)=>t.value-e.value).map(({player:t,value:e})=>({player:t,value:u(e)})),traitorRoundsLostTimelimitCount:[...n].map(t=>({player:t,value:t.rounds.traitor.filter(e=>e.outcome.reason==="timelimit").length})).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value),traitorNoItemsWonRoundCount:[...n].map(t=>{const e=t.guid,s=t.rounds.traitor.filter(({events:a,outcome:i})=>{const r=i.winner==="traitor",l=a.some(({type:m,player:o})=>m==="item-buy"&&o.guid===e);return r&&!l}).length;return{player:t,value:s}}).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value),traitorRoundsFirstBlood:[...n].map(t=>({player:t,value:t.stats.roundsFirstBlood.traitor.length/(t.rounds.traitor.length||1)})).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value).map(({player:t,value:e})=>({player:t,value:(e*100).toFixed(1)+"%"})),traitorRoundsAced:[...n].map(t=>({player:t,value:t.stats.aces.traitor.length})).filter(({value:t})=>t>0).sort((t,e)=>e.value-t.value),radarsBoughtPct:[...n].filter(t=>t.stats.items.traitor.length>0).map(t=>{var i;const e=t.stats.items.traitor,s=((i=e.find(({name:r})=>r==="RADAR"))==null?void 0:i.count)||0,a=e.reduce((r,{count:l})=>r+l,0);return{player:t,value:s/(a||1)}}).sort((t,e)=>e.value-t.value).map(({player:t,value:e})=>({player:t,value:(e*100).toFixed(1)+"%"})),chatMessages:[...n].filter(t=>t.stats.chatMessages.any.length>0).sort((t,e)=>e.stats.chatMessages.any.length-t.stats.chatMessages.any.length).map(t=>({player:t,value:t.stats.chatMessages.any.length}))}}function h(n){return n==="traitor"?"traitor":"innocent"}function k(n){const t=n.reduce((e,s)=>{const a={playtime:e.playtime+s.outcome.roundLength,wins:e.wins};a.wins[s.outcome.winner]||(a.wins[s.outcome.winner]={});const i=a.wins[s.outcome.winner];return i[s.outcome.reason]=(i[s.outcome.reason]||0)+1,a},{playtime:0,wins:{}});return p(g({rounds:n.length||0},t),{playtime:Math.floor(t.playtime)})}function O(n){var s;const t=n.flatMap(({events:a})=>a.filter(({type:i})=>i==="item-buy")),e=new Map;for(const a of t)e.set(a.item,{count:(((s=e.get(a.item))==null?void 0:s.count)||0)+1,role:a.player.role});return[...e].map(([a,i])=>g({name:a},i)).sort((a,i)=>i.count-a.count)}function w(n,t){return n.findIndex(({players:e})=>e.findIndex(s=>s.guid===t)>-1)>-1}function E(n,t){return n.filter(({players:e})=>e.findIndex(s=>s.guid===t)>-1).map(e=>p(g({},e),{player:e.players.find(s=>s.guid===t)}))}function I(n){return n.filter(({player:t,outcome:e})=>h(t.role)===e.winner)}function L(n){return n.filter(({events:t,player:e})=>t.filter(({type:a})=>a==="death").findIndex(({victim:a})=>a.guid===e.guid)===-1)}function T(n){return n.filter(({events:t,player:e})=>t.filter(({type:a})=>a==="death").findIndex(({victim:a})=>a.guid===e.guid)===0)}function b(n){return n.filter(({events:t,player:e})=>{var a,i,r;const s=t.filter(({type:l})=>l==="death");return((i=(a=s[0])==null?void 0:a.attacker)==null?void 0:i.guid)===e.guid&&((r=s[0])==null?void 0:r.victim.guid)!==e.guid})}function A(n){return n.reduce((t,{outcome:{roundLength:e}})=>t+e,0)}function y(n){var s;const t=(s=n[0])==null?void 0:s.player.guid;return n.flatMap(({events:a})=>a.filter(({type:i})=>i==="death")).filter(({victim:a,attacker:i})=>i&&i.guid===t&&i.guid!==a.guid)}function F(n){var s;const t=(s=n[0])==null?void 0:s.player.guid;return n.flatMap(({events:a})=>a.filter(({type:i})=>i==="death")).filter(({victim:a})=>a.guid===t)}function H(n,t){return n.length/(t.length||1)}function C(n,t){const e=P(n).length,s=n.length-e,a=t.length+e;return s/(a||1)}function N(n){return n.filter(({means:t})=>["MOD_PISTOL_BULLET","MOD_RIFLE_BULLET","MOD_HEAD_SHOT"].includes(t))}function B(n){return n.filter(({means:e})=>e==="MOD_HEAD_SHOT").length/(n.length||1)}function P(n){return n.filter(({victim:t,attacker:e})=>t&&h(t.role)===h(e.role))}function W(n){return n.filter(({victim:t,attacker:e})=>!e||t.guid===e.guid)}function j(n){return n.filter(({means:t})=>["MOD_EXPLOSIVE","MOD_GRENADE_SPLASH","MOD_PROJECTILE_SPLASH","MOD_PROJECTILE"].includes(t))}function G(n){return n.filter(({weapon:t})=>["barrel_mp","destructible_car"].includes(t))}function J(n){return n.flatMap(e=>y([e]).reduce((a,i,r,{[r-1]:l,[r+1]:m})=>{const o=a[a.length-1];return l&&i.time-5<=l.time?(o.includes(l)||o.push(l),o.push(i)):m&&(!o||o.length>0)&&a.push([]),a},[])).filter(e=>e.length>0)}function U(n){return n.filter(t=>{const e=y([t]),s=t.players.filter(({role:a})=>h(a)!==h(t.player.role));return e.length===s.length})}function V(n){var e;const t=new Map;for(const s of n)t.set(s.weapon,{kills:(((e=t.get(s.weapon))==null?void 0:e.kills)||0)+1});return[...t].map(([s,a])=>g({name:s},a)).sort((s,a)=>a.kills-s.kills)}function X(n,t){var a;const e=n.flatMap(({events:i})=>i.filter(({type:r,player:l})=>r==="item-buy"&&l.guid===t)),s=new Map;for(const i of e)s.set(i.item,{count:(((a=s.get(i.item))==null?void 0:a.count)||0)+1,role:i.player.role});return[...s].map(([i,r])=>g({name:i},r)).sort((i,r)=>r.count-i.count)}function q(n){var s;const t=(s=n[0])==null?void 0:s.player.guid;return n.flatMap(({events:a})=>a.filter(({type:i})=>i==="say")).filter(a=>a.player.guid===t&&a.messageType==="chat")}self.onmessage=({data:{data:n,filters:t}})=>{const e=S(n.rounds,t),s=[...n.playerMap.values()].filter(({isBot:a})=>!a).sort((a,i)=>a.name.localeCompare(i.name));self.postMessage(K(e,s))}})();
